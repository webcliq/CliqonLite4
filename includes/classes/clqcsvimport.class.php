<?php class clqcsvimport extends clq{public$rootpath="";public$lcd="";public$thisclass="clqcsvimport";public$cfg=array();public$tablename="data";public$field_names=array();public$field_values=array();public$encloser='"';public$encoding="UTF-8";public$separator=";";public$escapechar="\\";public$terminator="\n";public$filename="data\import.csv";public$useheader=true;public$foreachlcd=true;public$isinsert=true;public$istest=true;public$tables=array();public$useidiom=false;public function __construct(){global $rootpath;$this->rootpath=$rootpath;global $cfg;$this->cfg=$cfg;global $clqtables;$this->tables=$clqtables;}public function testclqcsvimport(){return"Test: ".$this->thisclass;}public function import(){$result="";$this->lcd=$_REQUEST['langcd'];$this->encoding=$_REQUEST['encoding'];$this->separator=$_REQUEST['field_separate_char'];$this->encloser=$_REQUEST['field_enclose_char'];$this->escapechar=$_REQUEST['field_escape_char'];$this->filename=$this->rootpath."data/".$_REQUEST['file_source'];$this->tablename=$_REQUEST['whichtable'];if(isset($_REQUEST['use_csv_header'])){$this->useheader=true;}else{$this->useheader=false;};if(isset($_REQUEST['duplicate_idiom'])){$this->foreachlcd=true;}else{$this->foreachlcd=false;};if(isset($_REQUEST['do_insert'])){$this->isinsert=true;}else{$this->isupdate=true;};if(isset($_REQUEST['do_test'])){$this->istest=true;}else{$this->istest=false;};if(isset($_REQUEST['use_idiom'])){$this->useidiom=true;}else{$this->useidiom=false;};$fd=fopen($this->filename,"r");$csv=fread($fd,filesize($this->filename));fclose($fd);$r=array();$rows=explode($this->terminator,trim($csv));if($this->useheader===true){$this->field_names=explode($this->separator,str_replace('"','',$rows[0]));foreach(R::$writer->getColumns($this->tablename)as$fieldname=>$type){$importtable[]=$fieldname;};$a=self::trimArray($this->field_names);if($this->isinsert==true){$b=self::trimArray(array_slice($importtable,1));}else{$b=self::trimArray($importtable);}$diffs=self::arrayDiffEmulation($b,$a);if(count($diffs)>0){$result.="There is a mismatch between the Import Table you have specified and the CSV Contents <br /> <br />Is the Table Name correct and does the CSV file, especially the number and definition of the columns, match the Table Specification <br /> <br />";$result.="Table: ".count($b)." Import: ".count($a);return$result;exit;}$values=array_slice($rows,1);foreach($values as$n=>$vals){$this->field_values[$n]=explode($this->separator,$vals);}$this->field_names=$importtable;if($this->isinsert==true){if($this->foreachlcd==true){foreach($this->cfg['site.idiom']as$lcdcode=>$lcdname){$result.=self::doInsert($this->field_values,$this->field_names,$this->tablename,$this->istest,$lcdcode);}}else{$result.=self::doInsert($this->field_values,$this->field_names,$this->tablename,$this->istest,$this->lcd);}return$result;exit;}if($this->isupdate==true){$result=self::doUpdate($this->field_values,$this->field_names,$this->tablename,$this->istest);return$result;exit;}}else{$values=array_slice($rows,1);foreach($values as$n=>$vals){$this->field_values[$n]=explode($this->separator,$vals);}print_r($this->field_values);}}private function doInsert($vals,$fldnames,$tablename,$istest=true,$idiom=""){$qrepl=array("{lcd}","{n}");$fldnames=array_flip(array_slice($fldnames,1));$i=1;for($n=0;$n<count($vals);$n++){if($istest!=true){$data=R::dispense($tablename);};foreach($fldnames as$nid=>$fld){$val=$vals[$n][$fld];if($this->useidiom===false){if($idiom!=""){if($fld=="clq_langcd"){if($istest!=true){$data->clq_langcd=$idiom;};$ln.="clq_langcd = ".$idiom.", ";}else{$qwith=array($idiom,$i);$val=str_replace($qrepl,$qwith,$val);if($istest!=true){$data->$nid=$val;};$ln.=$nid." = ".$val.", ";}}else{$qwith=array($idiom,$i);$val=str_replace($qrepl,$qwith,$val);if($istest!=true){$data->$nid=utf8_encode($val);};$ln.=$nid." = ".utf8_encode($val).", ";}}else{$qwith=array($idiom,$i);$val=str_replace($qrepl,$qwith,$val);if($istest!=true){$data->$nid=utf8_encode($val);};$ln.=$nid." = ".$val.", ";}}$str=trim($ln,", ");$ln="";if($istest!=true){$newid=R::store($data);};if($istest!=true){$result.="<p><strong>".$newid."</strong>: ".utf8_encode($str)." - <strong>Ok</strong></p>";}else{$result.="<p>".$i.": ".utf8_encode($str)."</p>";}$str="";$i++;}return$result;}private function doUpdate($vals,$fldnames,$tablename,$istest=true){$fldnames=array_flip($fldnames);$i=1;for($n=0;$n<count($vals);$n++){if($istest!=true){$data=R::load($tablename,$vals[$n]['id']);};foreach($fldnames as$nid=>$fld){if(($fld!='id')||($fld!='clq_langcd')){$val=$vals[$n][$fld];if($istest!=true){$data->$nid=utf8_encode($val);};$ln.=$nid." = ".utf8_encode($val).", ";}}$str=trim($ln,", ");$ln="";if($istest!=true){$id=R::store($data);};if($istest!=true){$result.="<p><strong>".$id."</strong>: ".utf8_encode($str)." - <strong>Ok</strong></p>";}else{$result.="<p>".$i.": ".utf8_encode($str)."</p>";}$str="";$i++;}return$result;}function arrayDiffEmulation($arrayFrom,$arrayAgainst){$arrayAgainst=array_flip($arrayAgainst);foreach($arrayFrom as$key=>$value){if(isset($arrayAgainst[$value])){unset($arrayFrom[trim($key)]);}}return$arrayFrom;}function trimArray($a){$b=array_flip($a);$c=array();foreach($b as$val=>$key){$c[$val]=trim($key);}$d=array_flip($c);$e=array_pop($d);return$d;}}?>