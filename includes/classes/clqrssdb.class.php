<?php
 define('RSS1','RSS 1.0',true);define('RSS2','RSS 2.0',true);define('ATOM','ATOM',true);abstract class FeedWriter{private$channels=array();private$items=array();private$data=array();private$CDATAEncoding=array();private$version=null;protected function __construct($version=RSS2){$this->version=$version;$this->channels['title']=$version.' Feed';$this->channels['link']='http://www.ajaxray.com/blog';$this->CDATAEncoding=array('description','content:encoded','summary');}public function setChannelElement($elementName,$content){$this->channels[$elementName]=$content;}public function setChannelElementsFromArray($elementArray){if(!is_array($elementArray))return;foreach($elementArray as$elementName=>$content){$this->setChannelElement($elementName,$content);}}public function generateFeed($useGenericContentType=FALSE){$contentType="text/xml";if(!$useGenericContentType){switch($this->version){case RSS2:$contentType="application/rss+xml";break;case RSS1:$contentType="application/rdf+xml";break;case ATOM:$contentType="application/atom+xml";break;}}header("Content-Type: ".$contentType);$this->printHeader();$this->printChannels();$this->printItems();$this->printFooter();}public function createNewItem(){$Item=new FeedItem($this->version);return$Item;}public function addItem(FeedItem $feedItem){if($feedItem->getVersion()!=$this->version)die('Feed type mismatch: This instance can handle '.$this->version.' feeds only, but item with type '.$feedItem->getVersion().' given.');$this->items[]=$feedItem;}public function setTitle($title){$this->setChannelElement('title',$title);}public function setDate($date){if($this->version!=ATOM)return;if($date instanceof DateTime)$date=$date->format(DateTime::ATOM);elseif(is_numeric($date))$date=date(DATE_ATOM,$date);else $date=date(DATE_ATOM,strtotime($date));$this->setChannelElement('updated',$date);}public function setDescription($desciption){if($this->version!=ATOM)$this->setChannelElement('description',$desciption);}public function setLink($link){$this->setChannelElement('link',$link);}public function setImage($title,$link,$url){$this->setChannelElement('image',array('title'=>$title,'link'=>$link,'url'=>$url));}public function setChannelAbout($url){$this->data['ChannelAbout']=$url;}public static function uuid($key=null,$prefix=''){$key=($key==null)?uniqid(rand()):$key;$chars=md5($key);$uuid=substr($chars,0,8).'-';$uuid.=substr($chars,8,4).'-';$uuid.=substr($chars,12,4).'-';$uuid.=substr($chars,16,4).'-';$uuid.=substr($chars,20,12);return$prefix.$uuid;}private function printHeader(){$out='<?xml version="1.0" encoding="utf-8"?>'.PHP_EOL;if($this->version==RSS2){$out.='<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/">';}elseif($this->version==RSS1){$out.='<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns="http://purl.org/rss/1.0/" xmlns:dc="http://purl.org/dc/elements/1.1/">';}elseif($this->version==ATOM){$out.='<feed xmlns="http://www.w3.org/2005/Atom">';}$out.=PHP_EOL;echo $out;}private function printFooter(){if($this->version==RSS2){echo'</channel>'.PHP_EOL.'</rss>';}elseif($this->version==RSS1){echo'</rdf:RDF>';}elseif($this->version==ATOM){echo'</feed>';}}private function makeNode($tagName,$tagContent,$attributes=null){$nodeText='';$attrText='';if(is_array($attributes)&&count($attributes)>0){foreach($attributes as$key=>$value){$value=htmlspecialchars($value);$attrText.=" $key=\"$value\" ";}$attrText=substr($attrText,0,strlen($attrText)-1);}if(is_array($tagContent)&&$this->version==RSS1){$attrText=' rdf:parseType="Resource"';}$attrText.=(in_array($tagName,$this->CDATAEncoding)&&$this->version==ATOM)?' type="html"':'';$nodeText.="<{$tagName}{$attrText}>";$nodeText.=(in_array($tagName,$this->CDATAEncoding))?'<![CDATA[':'';if(is_array($tagContent)){foreach($tagContent as$key=>$value){$nodeText.=$this->makeNode($key,$value);}}else{$nodeText.=(in_array($tagName,$this->CDATAEncoding))?$this->sanitizeCDATA($tagContent):htmlspecialchars($tagContent);}$nodeText.=(in_array($tagName,$this->CDATAEncoding))?']]>':'';$nodeText.="</$tagName>".PHP_EOL;return$nodeText;}private function printChannels(){switch($this->version){case RSS2:echo'<channel>'.PHP_EOL;break;case RSS1:echo(isset($this->data['ChannelAbout']))?"<channel rdf:about=\"{$this->data['ChannelAbout']}\">":"<channel rdf:about=\"{$this->channels['link']}\">";break;}foreach($this->channels as$key=>$value){if($this->version==ATOM&&$key=='link'){echo $this->makeNode($key,'',array('href'=>$value));echo $this->makeNode('id',FeedWriter::uuid($value,'urn:uuid:'));}else{echo $this->makeNode($key,$value);}}if($this->version==RSS1){echo"<items>".PHP_EOL."<rdf:Seq>".PHP_EOL;foreach($this->items as$item){$thisItems=$item->getElements();echo"<rdf:li resource=\"{$thisItems['link']['content']}\"/>".PHP_EOL;}echo"</rdf:Seq>".PHP_EOL."</items>".PHP_EOL."</channel>".PHP_EOL;}}private function printItems(){foreach($this->items as$item){$thisItems=$item->getElements();echo $this->startItem($thisItems['link']['content']);foreach($thisItems as$feedItem){echo $this->makeNode($feedItem['name'],$feedItem['content'],$feedItem['attributes']);}echo $this->endItem();}}private function startItem($about=false){if($this->version==RSS2){echo'<item>'.PHP_EOL;}elseif($this->version==RSS1){if($about){echo"<item rdf:about=\"$about\">".PHP_EOL;}else{die("link element is not set.".PHP_EOL."It's required for RSS 1.0 to be used as the about attribute of the item tag.");}}elseif($this->version==ATOM){echo"<entry>".PHP_EOL;}}private function endItem(){if($this->version==RSS2||$this->version==RSS1){echo'</item>'.PHP_EOL;}elseif($this->version==ATOM){echo"</entry>".PHP_EOL;}}private function sanitizeCDATA($text){$text=str_replace("]]>","]]&gt;",$text);$text=str_replace("<![CDATA[","&lt;![CDATA[",$text);return$text;}}class FeedItem{private$elements=array();private$version;function __construct($version=RSS2){$this->version=$version;}public function addElement($elementName,$content,$attributes=null,$overwrite=FALSE){if(isset($this->elements[$elementName])&&!$overwrite)return;$this->elements[$elementName]['name']=$elementName;$this->elements[$elementName]['content']=$content;$this->elements[$elementName]['attributes']=$attributes;}public function addElementArray($elementArray){if(!is_array($elementArray))return;foreach($elementArray as$elementName=>$content){$this->addElement($elementName,$content);}}public function getElements(){return$this->elements;}public function getVersion(){return$this->version;}public function setDescription($description){$tag=($this->version==ATOM)?'summary':'description';$this->addElement($tag,$description);}public function setTitle($title){$this->addElement('title',$title);}public function setDate($date){if(!is_numeric($date)){if($date instanceof DateTime){if(version_compare(PHP_VERSION,'5.3.0','>='))$date=$date->getTimestamp();else $date=strtotime($date->format('r'));}else $date=strtotime($date);}if($this->version==ATOM){$tag='updated';$value=date(DATE_ATOM,$date);}elseif($this->version==RSS2){$tag='pubDate';$value=date(DATE_RSS,$date);}else{$tag='dc:date';$value=date("Y-m-d",$date);}$this->addElement($tag,$value);}public function setLink($link){if($this->version==RSS2||$this->version==RSS1){$this->addElement('link',$link);}else{$this->addElement('link','',array('href'=>$link));$this->addElement('id',FeedWriter::uuid($link,'urn:uuid:'));}}public function setEncloser($url,$length,$type){if($this->version!=RSS2)return;$attributes=array('url'=>$url,'length'=>$length,'type'=>$type);$this->addElement('enclosure','',$attributes);}public function setAuthor($author){if($this->version!=ATOM)return;$this->addElement('author',array('name'=>$author));}public function setId($id){if($this->version==RSS2){$this->addElement('guid',$id,array('isPermaLink'=>'false'));}elseif($this->version==ATOM){$this->addElement('id',FeedWriter::uuid($id,'urn:uuid:'),NULL,TRUE);}}}