<?php class iniparse{protected$file;public$use_array_object=true;public function __construct($file=null){parent::__construct();if($file!==null){$this->setFile($file);}}public function parse($file=null){if($file!==null){$this->setFile($file);}if(empty($this->file)){throw new LogicException("Need a file to parse.");}$simple_parsed=parse_ini_file($this->file,true);$inheritance_parsed=$this->parseSections($simple_parsed);return$this->parseKeys($inheritance_parsed);}public function process($src){$simple_parsed=parse_ini_string($src,true);$inheritance_parsed=$this->parseSections($simple_parsed);return$this->parseKeys($inheritance_parsed);}public function setFile($file){if(!file_exists($file)||!is_readable($file)){throw new InvalidArgumentException("The file '{$file}' cannot be opened.");}$this->file=$file;return$this;}private function parseSections(array$simple_parsed){$sections=array();$globals=array();foreach($simple_parsed as$k=>$v){if(is_array($v)){$sections[$k]=$v;}else{$globals[$k]=$v;}}foreach($sections as$k=>$v){if(false===strpos($k,':')){continue;}$sects=array_map('trim',array_reverse(explode(':',$k)));$root=array_pop($sects);$arr=$v;foreach($sects as$s){if($s==='^'){$arr=array_merge($globals,$arr);}elseif(array_key_exists($s,$sections)){$arr=array_merge($sections[$s],$arr);}else{throw new UnexpectedValueException("IniParser: In file '{$this->file}', section '{$root}': Cannot inherit from unknown section '{$s}'");}}$sections[$root]=$arr;}return$globals+$sections;}private function parseKeys(array$arr){$output=$this->getArrayValue();foreach($arr as$k=>$v){if(is_array($v)){$output[$k]=$this->parseKeys($v);}else{$append=false;if(preg_match('/\s*\+\s*$/',$k)>0){$k=preg_replace('/\s*\+\s*$/','',$k);$append=true;}$path=explode('.',$k);$current=&$output;while(($current_key=array_shift($path))!==null){if('string'===gettype($current)){$current=array($current);}if(!array_key_exists($current_key,$current)){if(!empty($path)){$current[$current_key]=$this->getArrayValue();}else{$current[$current_key]=null;}}$current=&$current[$current_key];}$value=$this->parseValue($v);if($append&&$current!==null){if(is_array($value)){if(!is_array($current)){throw new LogicException("Cannot append array to inherited value '{$k}'");}$value=array_merge($current,$value);}else{$value=$current.$value;}}$current=$value;}}return$output;}protected function parseValue($value){if(preg_match('/\[\s*.*?(?:\s*,\s*.*?)*\s*\]/',$value)>0){return explode(',',trim(preg_replace('/\s+/','',$value),'[]'));}return$value;}protected function getArrayValue($array=array()){if($this->use_array_object){return new ArrayObject($array,ArrayObject::ARRAY_AS_PROPS);}else{return$array;}}}?>