<?php class clqutil extends clq{public$properties=array();function __construct(){parent::__construct();$this->properties=clq::getProps();}function doExport($rq){$sql="SELECT ";foreach($rq['fields']as$f=>$fldname){$sql.=$fldname.", ";}$sql=trim($sql,", ");$sql.=" FROM ".$rq['table'];if($rq['query']!=""){$sql.=" WHERE ".$rq['query'];}$rs=R::getAll($sql);$csv=new rs2csv;$csv->set_fname($rq['filename']);$csv->set_ctype("application/force-download");$csv->set_cdisp("attachment");$csv->set_sep($rq['separator']);$csv->set_enc($rq['enclosed']);$csv->process_rs($rs,$rq['fields']);$csv->output_csv();}}class rs2csv{var$_str,$_fname,$_sep,$_rs,$_link,$_ctype,$_cdisp,$_con=false;function rs2csv(){$this->_str="";$this->set_fname("file.csv");$this->set_ctype("application/csv");$this->set_cdisp("attachment");$this->set_sep(",");$this->set_enc('"');}function set_fname($fname){$this->_fname=$fname;}function set_ctype($ctype){$this->_ctype=$ctype;}function set_cdisp($cdisp){$this->_cdisp=$cdisp;}function set_sep($sep){$this->_sep=$sep;}function set_enc($enc){$this->_enc=$enc;}function process_rs($rs,$flds){$this->_rs=$rs;if(count($this->_rs)==0){$this->display_err("Invalid resultset. Number of fields is 0.");}foreach($flds as$f=>$fld){$this->_str.=$this->_enc.$fld.$this->_enc.$this->_sep;}$this->_str=trim($this->_str,$this->_sep);$this->_str.="\n";for($r=0;$r<count($rs);$r++){foreach($flds as$f=>$fld){$this->_str.=$this->_enc.$rs[$r][$fld].$this->_enc.$this->_sep;}$this->_str=trim($this->_str,$this->_sep);$this->_str.="\n";}}function display_err($err_msg){echo"Error: $err_msg";exit;}function output_csv(){if(strlen($this->_str)==0){$this->display_err("Empty file");};header("Expires: Mon, 26 Jul 2097 05:00:00 GMT");header("Last-Modified: ".gmdate("D, d M Y H:i:s")." GMT");header("Cache-Control: no-store, no-cache, must-revalidate");header("Cache-Control: post-check=0, pre-check=0",false);header("Pragma: no-cache");header("Content-Length: ".strlen($this->_str));header("Content-Type: ".$this->_ctype);header("Content-Disposition: ".$this->_cdisp."; filename=".$this->_fname);header("Connection: close");echo $this->_str;}}class clqcsvimport extends clq{public$tablename="data";public$field_names=array();public$field_values=array();public$encloser='"';public$encoding="UTF-8";public$separator=";";public$escapechar="\\";public$terminator="\n";public$filename="data\import.csv";public$useheader=true;public$foreachlcd=true;public$isinsert=true;public$istest=true;public$delrecs=false;public$tables=array();public$useidiom=false;function __construct(){parent::__construct();$this->properties=clq::getProps();}function doImport($rq,$fn,$ti,$dr,$ur){$result="";$this->lcd=$rq['langcd'];$this->encoding="UTF-8";$this->separator=",";$this->encloser='"';$this->escapechar="\\";$this->filename="data/".$fn;$this->tablename=$rq['table'];$this->useheader=true;$this->foreachlcd=false;$this->useidiom=true;if($ur=="y"){$this->isinsert=true;}else{$this->isupdate=true;};if($ti=="y"){$this->istest=true;}else{$this->istest=false;};if($dr=="y"){$this->delrecs=true;}else{$this->delrecs=false;};$fd=fopen($this->filename,"r");$csv=fread($fd,filesize($this->filename));fclose($fd);$r=array();$rows=explode($this->terminator,trim($csv));if($this->useheader===true){$this->field_names=explode($this->separator,str_replace('"','',$rows[0]));foreach(R::$writer->getColumns($this->tablename)as$fieldname=>$type){$importtable[]=$fieldname;};$a=self::trimArray($this->field_names);if($this->isinsert==true){$b=self::trimArray(array_slice($importtable,1));}else{$b=self::trimArray($importtable);}$diffs=self::arrayDiffEmulation($b,$a);if(count($diffs)>0){$result.="There is a mismatch between the Import Table you have specified and the CSV Contents <br /> <br />Is the Table Name correct and does the CSV file, especially the number and definition of the columns, match the Table Specification <br /> <br />";$result.="Table: ".count($b)." Import: ".count($a);return$result;exit;}$values=array_slice($rows,1);foreach($values as$n=>$vals){$this->field_values[$n]=explode($this->separator,$vals);}$this->field_names=$importtable;if($this->isinsert==true){if($this->foreachlcd==true){foreach($this->cfg['site.idiom']as$lcdcode=>$lcdname){$result.=self::doInsert($this->field_values,$this->field_names,$this->tablename,$this->istest,$lcdcode);}}else{$result.=self::doInsert($this->field_values,$this->field_names,$this->tablename,$this->istest,$this->lcd);}return$result;exit;}if($this->isupdate==true){$result=self::doUpdate($this->field_values,$this->field_names,$this->tablename,$this->istest);return$result;exit;}}else{$values=array_slice($rows,1);foreach($values as$n=>$vals){$this->field_values[$n]=explode($this->separator,$vals);}print_r($this->field_values);}}private function doInsert($vals,$fldnames,$tablename,$istest=true,$idiom=""){$qrepl=array("{lcd}","{n}");$fldnames=array_flip(array_slice($fldnames,1));$i=1;for($n=0;$n<count($vals);$n++){if($istest!=true){$data=R::dispense($tablename);};foreach($fldnames as$nid=>$fld){$val=$vals[$n][$fld];if($this->useidiom===false){if($idiom!=""){if($fld=="clq_langcd"){if($istest!=true){$data->clq_langcd=$idiom;};$ln.="clq_langcd = ".$idiom.", ";}else{$qwith=array($idiom,$i);$val=str_replace($qrepl,$qwith,$val);if($istest!=true){$data->$nid=$val;};$ln.=$nid." = ".$val.", ";}}else{$qwith=array($idiom,$i);$val=str_replace($qrepl,$qwith,$val);if($istest!=true){$data->$nid=utf8_encode($val);};$ln.=$nid." = ".utf8_encode($val).", ";}}else{$qwith=array($idiom,$i);$val=str_replace($qrepl,$qwith,$val);if($istest!=true){$data->$nid=utf8_encode($val);};$ln.=$nid." = ".$val.", ";}}$str=trim($ln,", ");$ln="";if($istest!=true){$newid=R::store($data);};if($istest!=true){$result.="<p><strong>".$newid."</strong>: ".utf8_encode($str)." - <strong>Ok</strong></p>";}else{$result.="<p>".$i.": ".utf8_encode($str)."</p>";}$str="";$i++;}return$result;}private function doUpdate($vals,$fldnames,$tablename,$istest=true){$fldnames=array_flip($fldnames);$i=1;for($n=0;$n<count($vals);$n++){if($istest!=true){$data=R::load($tablename,$vals[$n]['id']);};foreach($fldnames as$nid=>$fld){if(($fld!='id')||($fld!='clq_langcd')){$val=$vals[$n][$fld];if($istest!=true){$data->$nid=utf8_encode($val);};$ln.=$nid." = ".utf8_encode($val).", ";}}$str=trim($ln,", ");$ln="";if($istest!=true){$id=R::store($data);};if($istest!=true){$result.="<p><strong>".$id."</strong>: ".utf8_encode($str)." - <strong>Ok</strong></p>";}else{$result.="<p>".$i.": ".utf8_encode($str)."</p>";}$str="";$i++;}return$result;}function arrayDiffEmulation($arrayFrom,$arrayAgainst){$arrayAgainst=array_flip($arrayAgainst);foreach($arrayFrom as$key=>$value){if(isset($arrayAgainst[$value])){unset($arrayFrom[trim($key)]);}}return$arrayFrom;}function trimArray($a){$b=array_flip($a);$c=array();foreach($b as$val=>$key){$c[$val]=trim($key);}$d=array_flip($c);$e=array_pop($d);return$d;}}class clqcurl extends clq{public$tablename="clqdata";public$fieldid="id";public$contentfieldname="clq_text";public$idiomfieldname="clq_langcd";public$iconpath="";public$lstr=array();public$error_code;public$error_string;public$info;private$session;private$url;private$options=array();function __construct($url=''){global $rootpath;global $cfg;$this->rootpath=$rootpath;global $lcd;$this->lcd=$lcd;$this->adminpath=$roopath."admin/";$this->iconpath=$this->adminpath."images/icons/";$this->cfg=$cfg;if(!function_exists('curl_init')){trigger_error('cURL Class - PHP was not built with --with-curl, rebuild PHP to use cURL.');}if($url)$this->create($url);}public function get($url='',$options=array()){if(!empty($url))$this->create($url);$this->options($options);return$this->execute();}public function post(){$url='';$params=array();$options=array();switch(count($args=func_get_args())){default:case1:$advance_mode=TRUE;$params=$args[0];break;case2:case3:$advance_mode=FALSE;if(isset($args[0]))$url=$args[0];if(isset($args[1]))$params=$args[1];if(isset($args[2]))$options=$args[2];break;}if(!empty($url))$this->create($url);if(is_array($params)){$params=http_build_query($params);}$this->options($options);$this->options[CURLOPT_POST]=TRUE;$this->options[CURLOPT_POSTFIELDS]=$params;if(!$advance_mode){return$this->execute();}}public function set_cookies($params=array()){if(is_array($params)){$params=http_build_query($params);}$this->option(CURLOPT_COOKIE,$params);return$this;}public function http_login($username='',$password=''){$this->option(CURLOPT_USERPWD,$username.':'.$password);return$this;}public function proxy($url='',$port=80){$this->option(CURLOPT_HTTPPROXYTUNNEL.TRUE);$this->option(CURLOPT_PROXY,$url.':'.'80');return$this;}public function proxy_login($username='',$password=''){$this->option(CURLOPT_PROXYUSERPWD,$username.':'.$password);return$this;}public function options($options=array()){foreach($options as$option_code=>$option_value){$this->option($option_code,$option_value);}unset($option_code,$option_value);curl_setopt_array($this->session,$this->options);return$this;}public function option($code,$value){$this->options[$code]=$value;return$this;}public function create($url){$this->set_defaults();if(!preg_match('!^\w+://! i',$url)){$url='http://'.$url;}$this->url=$url;$this->session=curl_init($this->url);return$this;}public function execute(){if(!isset($this->options[CURLOPT_TIMEOUT]))$this->options[CURLOPT_TIMEOUT]=30;if(!isset($this->options[CURLOPT_RETURNTRANSFER]))$this->options[CURLOPT_RETURNTRANSFER]=TRUE;if(!isset($this->options[CURLOPT_FOLLOWLOCATION]))$this->options[CURLOPT_FOLLOWLOCATION]=TRUE;if(!isset($this->options[CURLOPT_FAILONERROR]))$this->options[CURLOPT_FAILONERROR]=TRUE;$this->options[CURLOPT_SSL_VERIFYHOST]=0;$this->options[CURLOPT_SSL_VERIFYPEER]=0;$this->options();$return=curl_exec($this->session);if($return===FALSE){$this->error_code=curl_errno($this->session);$this->error_string=curl_error($this->session);curl_close($this->session);$this->session=NULL;return FALSE;}else{$this->info=curl_getinfo($this->session);curl_close($this->session);$this->session=NULL;return$return;}}private function set_defaults(){$this->info=array();$this->options=array();$this->error_code=0;$this->error_string='';}}class clqftp extends clq{public$host="";public$port="";public$user="";public$pass="";public$link_id="";public$is_login="";public$debug=1;public$local_dir="";public$ftprootdir="";public$dir="/";public$properties=array();public function __construct(){parent::__construct();$this->properties=clq::getProps();}function CliqonFTP($user="Anonymous",$pass="Email",$host="localhost",$port="21"){if($host)$this->host=$host;if($port)$this->port=$port;if($user)$this->user=$user;if($pass)$this->pass=$pass;$this->login();}function halt($msg,$line=__LINE__){echo"FTP Error in line:$line<br/>\n";echo"FTP Error message:$msg<br/>\n";exit();}function login(){if(!$this->link_id){$this->link_id=ftp_connect($this->host,$this->port)or $this->halt("Cannot connect to host:$this->host:$this->port",__LINE__);}if(!$this->is_login){$this->is_login=ftp_login($this->link_id,$this->user,$this->pass)or $this->halt("ftp login failed.invalid user or password",__LINE__);}}function systype(){return ftp_systype($this->link_id);}function pwd(){$this->login();$dir=ftp_pwd($this->link_id);$this->dir=$dir;return$dir;}function cdup(){$this->login();$isok=ftp_cdup($this->link_id);if($isok)$this->dir=$this->pwd();return$isok;}function cd($dir){$this->login();$isok=ftp_chdir($this->link_id,$dir);if($isok)$this->dir=$dir;return$isok;}function nlist($dir=""){$this->login();if(!$dir)$dir=".";$arr_dir=ftp_nlist($this->link_id,$dir);return$arr_dir;}function rawlist($dir="/"){$this->login();$arr_dir=ftp_rawlist($this->link_id,$dir);return$arr_dir;}function mkdir($dir){$this->login();return@ftp_mkdir($this->link_id,$dir);}function file_size($file){$this->login();$size=ftp_size($this->link_id,$file);return$size;}function chmod($file,$mode=0666){$this->login();return ftp_chmod($this->link_id,$file,$mode);}function delete($remote_file){$this->login();return ftp_delete($this->link_id,$remote_file);}function get($local_file,$remote_file,$mode=FTP_BINARY){$this->login();return ftp_get($this->link_id,$local_file,$remote_file,$mode);}function put($remote_file,$local_file,$mode=FTP_BINARY){$this->login();return ftp_put($this->link_id,$remote_file,$local_file,$mode);}function put_string($remote_file,$data,$mode=FTP_BINARY){$this->login();$tmp="/tmp";$tmpfile=tempnam($tmp,"tmp_");$fp=@fopen($tmpfile,"w+");if($fp){fwrite($fp,$data);fclose($fp);}else return0;$isok=$this->put($remote_file,$tmpfile,FTP_BINARY);@unlink($tmpfile);return$isok;}function p($msg){echo"<pre>";print_r($msg);echo"</pre>";}function close(){@ftp_quit($this->link_id);}}class clqcsvimport extends clq{public$thisclass="clqcsvimport";public$tablename="clqstring";public$field_names=array();public$field_values=array();public$encloser='"';public$encoding="UTF-8";public$separator=";";public$escapechar="\\";public$terminator="\n";public$filename="data\import.csv";public$useheader=true;public$foreachlcd=true;public$isinsert=true;public$istest=true;public$tables=array();public$useidiom=false;public function __construct(){parent::__construct();$this->properties=clq::getProps();global $clqtables;$this->tables=$clqtables;}public function import(){$result="";$this->lcd=$_REQUEST['langcd'];$this->encoding=$_REQUEST['encoding'];$this->separator=$_REQUEST['field_separate_char'];$this->encloser=$_REQUEST['field_enclose_char'];$this->escapechar=$_REQUEST['field_escape_char'];$this->filename=$this->rootpath."data/".$_REQUEST['file_source'];$this->tablename=$_REQUEST['whichtable'];if(isset($_REQUEST['use_csv_header'])){$this->useheader=true;}else{$this->useheader=false;};if(isset($_REQUEST['duplicate_idiom'])){$this->foreachlcd=true;}else{$this->foreachlcd=false;};if(isset($_REQUEST['do_insert'])){$this->isinsert=true;}else{$this->isupdate=true;};if(isset($_REQUEST['do_test'])){$this->istest=true;}else{$this->istest=false;};if(isset($_REQUEST['use_idiom'])){$this->useidiom=true;}else{$this->useidiom=false;};$fd=fopen($this->filename,"r");$csv=fread($fd,filesize($this->filename));fclose($fd);$r=array();$rows=explode($this->terminator,trim($csv));if($this->useheader===true){$this->field_names=explode($this->separator,str_replace('"','',$rows[0]));foreach(R::$writer->getColumns($this->tablename)as$fieldname=>$type){$importtable[]=$fieldname;};$a=self::trimArray($this->field_names);if($this->isinsert==true){$b=self::trimArray(array_slice($importtable,1));}else{$b=self::trimArray($importtable);}$diffs=self::arrayDiffEmulation($b,$a);if(count($diffs)>0){$result.="There is a mismatch between the Import Table you have specified and the CSV Contents <br /> <br />Is the Table Name correct and does the CSV file, especially the number and definition of the columns, match the Table Specification <br /> <br />";$result.="Table: ".count($b)." Import: ".count($a);return$result;exit;}$values=array_slice($rows,1);foreach($values as$n=>$vals){$this->field_values[$n]=explode($this->separator,$vals);}$this->field_names=$importtable;if($this->isinsert==true){if($this->foreachlcd==true){foreach($this->cfg['site.idiom']as$lcdcode=>$lcdname){$result.=self::doInsert($this->field_values,$this->field_names,$this->tablename,$this->istest,$lcdcode);}}else{$result.=self::doInsert($this->field_values,$this->field_names,$this->tablename,$this->istest,$this->lcd);}return$result;exit;}if($this->isupdate==true){$result=self::doUpdate($this->field_values,$this->field_names,$this->tablename,$this->istest);return$result;exit;}}else{$values=array_slice($rows,1);foreach($values as$n=>$vals){$this->field_values[$n]=explode($this->separator,$vals);}print_r($this->field_values);}}private function doInsert($vals,$fldnames,$tablename,$istest=true,$idiom=""){$qrepl=array("{lcd}","{n}");$fldnames=array_flip(array_slice($fldnames,1));$i=1;for($n=0;$n<count($vals);$n++){if($istest!=true){$data=R::dispense($tablename);};foreach($fldnames as$nid=>$fld){$val=$vals[$n][$fld];if($this->useidiom===false){if($idiom!=""){if($fld=="clq_langcd"){if($istest!=true){$data->clq_langcd=$idiom;};$ln.="clq_langcd = ".$idiom.", ";}else{$qwith=array($idiom,$i);$val=str_replace($qrepl,$qwith,$val);if($istest!=true){$data->$nid=$val;};$ln.=$nid." = ".$val.", ";}}else{$qwith=array($idiom,$i);$val=str_replace($qrepl,$qwith,$val);if($istest!=true){$data->$nid=utf8_encode($val);};$ln.=$nid." = ".utf8_encode($val).", ";}}else{$qwith=array($idiom,$i);$val=str_replace($qrepl,$qwith,$val);if($istest!=true){$data->$nid=utf8_encode($val);};$ln.=$nid." = ".$val.", ";}}$str=trim($ln,", ");$ln="";if($istest!=true){$newid=R::store($data);};if($istest!=true){$result.="<p><strong>".$newid."</strong>: ".utf8_encode($str)." - <strong>Ok</strong></p>";}else{$result.="<p>".$i.": ".utf8_encode($str)."</p>";}$str="";$i++;}return$result;}private function doUpdate($vals,$fldnames,$tablename,$istest=true){$fldnames=array_flip($fldnames);$i=1;for($n=0;$n<count($vals);$n++){if($istest!=true){$data=R::load($tablename,$vals[$n]['id']);};foreach($fldnames as$nid=>$fld){if(($fld!='id')||($fld!='clq_langcd')){$val=$vals[$n][$fld];if($istest!=true){$data->$nid=utf8_encode($val);};$ln.=$nid." = ".utf8_encode($val).", ";}}$str=trim($ln,", ");$ln="";if($istest!=true){$id=R::store($data);};if($istest!=true){$result.="<p><strong>".$id."</strong>: ".utf8_encode($str)." - <strong>Ok</strong></p>";}else{$result.="<p>".$i.": ".utf8_encode($str)."</p>";}$str="";$i++;}return$result;}function arrayDiffEmulation($arrayFrom,$arrayAgainst){$arrayAgainst=array_flip($arrayAgainst);foreach($arrayFrom as$key=>$value){if(isset($arrayAgainst[$value])){unset($arrayFrom[trim($key)]);}}return$arrayFrom;}function trimArray($a){$b=array_flip($a);$c=array();foreach($b as$val=>$key){$c[$val]=trim($key);}$d=array_flip($c);$e=array_pop($d);return$d;}}require_once'libs/streamfunctions.php';class CSVIterator implements ArrayAccess,Iterator,Countable{protected$pointer;protected$filename;protected$lines;protected$currentRow;public$length=0;public$delimiter=",";public$enclosure='"';public$escape='\\';public$maxCount=0;private function setup(){rewind($this->pointer);flock($this->pointer,LOCK_SH);$this->lines=array();$this->maxCount=0;while(!feof($this->pointer)){$current=ftell($this->pointer);$arr=version_compare(PHP_VERSION,"5.3",">=")?fgetcsv($this->pointer,$this->length,$this->delimiter,$this->enclosure,$this->escape):fgetcsv($this->pointer,$this->length,$this->delimiter,$this->enclosure);if(false===$arr){break;}$count=count($arr);$this->lines[]=$current;if($count>$this->maxCount){$this->maxCount=$count;}}rewind($this->pointer);flock($this->pointer,LOCK_UN);$this->next();return;}public function normalize(){rewind($this->pointer);flock($this->pointer,LOCK_EX);while(!feof($this->pointer)){$current=ftell($this->pointer);$arr=version_compare(PHP_VERSION,"5.3",">=")?fgetcsv($this->pointer,$this->length,$this->delimiter,$this->enclosure,$this->escape):fgetcsv($this->pointer,$this->length,$this->delimiter,$this->enclosure);;$count=count($arr);if($count<$this->maxCount){fseek($this->pointer,$current,SEEK_SET);fremovecsv($this->pointer,$this->length,$this->delimiter,$this->enclosure);finsertcsv($this->pointer,array_pad($arr,$this->maxCount,""),$this->delimiter,$this->enclosure);}}flock($this->pointer,LOCK_UN);$this->setup();$this->next();return;}public function save($filename){if($f=fopen($filename,'w')){$tell=ftell($this->pointer);$this->rewind();foreach($this as$row){fwrite($f,strval($row)."\n");}fclose($f);fseek($this->pointer,$tell,SEEK_SET);return filesize($filename);}return false;}public function __construct($file,$length=0,$delimiter=",",$enclosure='"',$escape='\\'){$this->filename=realpath((string)$file);$this->length=(int)$length;$this->delimiter=(string)$delimiter;$this->enclosure=(string)$enclosure;$this->escape=(string)$escape;$this->pointer=fopen((string)$file,"a+");$this->setup();}public function __destruct(){fclose($this->pointer);}public function __get($offset){return$this->offsetGet($offset);}public function __set($offset,$value){return$this->offsetSet($offset,$value);}public function __isset($offset){return$this->offsetExists($offset);}public function __unset($offset){return$this->offsetUnset($offset);}public function __toString(){$this->rewind();$str="";foreach($this as$row){$str.=(string)$row;}return$str;}public function __sleep(){return array("filename","length","delimiter","enclosure","escape",);}public function __wakeup(){$this->pointer=fopen($this->filename,"a+");$this->setup();}public function offsetGet($offset){if(strstr($offset,",")){$pos=explode(",",$offset,2);return$this->slice((int)$pos[0],intval($pos[1]?$pos[1]:$this->count()));}if(!is_numeric($offset)){throw new InvalidArgumentException();}$n=$this->count();if($offset>$n||$offset<0){throw new OutOfRangeException();}$current=ftell($this->pointer);fseek($this->pointer,$this->lines[$offset],SEEK_SET);$arr=version_compare(PHP_VERSION,"5.3",">=")?fgetcsv($this->pointer,$this->length,$this->delimiter,$this->enclosure,$this->escape):fgetcsv($this->pointer,$this->length,$this->delimiter,$this->enclosure);;fseek($this->pointer,$current,SEEK_SET);return new CSVIteratorRow($this,$offset,$arr);}public function offsetSet($offset,$value){if(!(is_array($value)||$value instanceof CSVIteratorRow)){throw new InvalidArgumentException();}if($offset<0){throw new OutOfRangeException();}$n=$this->count();$fields=is_array($value)?new CSVIteratorRow($this,is_numeric($offset)?$offset:$n,$value):$value;if(!is_numeric($offset)||$offset>=$n){return$this->append($fields->toArray());}$current=ftell($this->pointer);fseek($this->pointer,$this->lines[$offset],SEEK_SET);fremovecsv($this->pointer,$this->length,$this->delimiter,$this->enclosure);finsertcsv($this->pointer,$fields->toArray(),$this->delimiter,$this->enclosure,$this->escape);$this->setup();fseek($this->pointer,$current,SEEK_SET);$this->next();return;}public function offsetExists($offset){return isset($this->lines[$offset]);}public function offsetUnset($offset){if(!is_numeric($offset)){throw new InvalidArgumentException();}$n=$this->count();if($offset>$n||$offset<0){throw new OutOfRangeException();}return$this->remove($offset);}public function count(){return count($this->lines);}public function valid(){return key($this->lines)!==null&&is_array($this->currentRow);}public function rewind(){reset($this->lines);rewind($this->pointer);$this->currentRow=version_compare(PHP_VERSION,"5.3",">=")?fgetcsv($this->pointer,$this->length,$this->delimiter,$this->enclosure,$this->escape):fgetcsv($this->pointer,$this->length,$this->delimiter,$this->enclosure);return;}public function key(){return key($this->lines);}public function current(){return new CSVIteratorRow($this,key($this->lines),$this->currentRow);}public function next(){next($this->lines);$this->currentRow=version_compare(PHP_VERSION,"5.3",">=")?fgetcsv($this->pointer,$this->length,$this->delimiter,$this->enclosure,$this->escape):fgetcsv($this->pointer,$this->length,$this->delimiter,$this->enclosure);return;}public function prev(){fseek($this->pointer,prev($this->lines),SEEK_SET);$this->next();return$this->current();}public function end(){fseek($this->pointer,end($this->lines),SEEK_SET);$this->next();return$this->current();}public function reset(){return$this->rewind();}public function remove($offset){if(!isset($this->lines[$offset])){throw new OutOfRangeException();}$current=ftell($this->pointer);fseek($this->pointer,$this->lines[$offset],SEEK_SET);$ret=fremovecsv($this->pointer,$this->length,$this->delimiter,$this->enclosure,$this->escape);$this->setup();fseek($this->pointer,$current,SEEK_SET);$this->next();return$ret;}public function append(array$fields){$current=ftell($this->pointer);fseek($this->pointer,0,SEEK_END);$count=count($fields);if($count>$this->maxCount){$this->maxCount=$count;}elseif($count<$this->maxCount){$fields=array_pad($fields,$this->maxCount,"");$count=count($fields);}$ret=version_compare(PHP_VERSION,"5.3","<")?fputcsv($this->pointer,$fields,$this->delimiter,$this->enclosure):fputcsv($this->pointer,$fields,$this->delimiter,$this->enclosure,$this->escape);$this->lines[]=$current;fseek($this->pointer,$current,SEEK_SET);return$ret;}public function prepend(array$fields){$current=ftell($this->pointer);fseek($this->pointer,0,SEEK_SET);$ret=finsertcsv($this->pointer,$fields,$this->delimiter,$this->enclosure,$this->escape);$this->setup();fseek($this->pointer,$current,SEEK_SET);$this->next();return$ret;}public function insert($offset,array$fields){if(!isset($this->lines[$offset])){return$this->append($fields);}$current=ftell($this->pointer);fseek($this->pointer,$this->lines[$offset],SEEK_SET);$ret=finsertcsv($this->pointer,$fields,$this->delimiter,$this->enclosure,$this->escape);$this->setup();fseek($this->pointer,$current,SEEK_SET);$this->next();return$ret;}public function shift(){$x=$this[0];$this->remove(0);return$x;}public function pop(){$l=$this->count()-1;$x=$this[$l];$this->remove($l);return$x;}public function push(){$args=func_get_args();$i=0;foreach($args as$arg){$this->append($arg);$i+=1;}return$i;}public function unshift(){$args=func_get_args();$i=0;foreach($args as$arg){$this->prepend($arg);$i+=1;}return$i;}public function slice($offset,$length=null){if(!isset($this->lines[$offset])){throw new OutOfRangeException();}$length=$length?$length:$this->count();$ret=array();fseek($this->pointer,$this->lines[$offset]);while($length&&!feof($this->pointer)){$ret[]=fremovecsv($this->pointer,$this->length,$this->delimiter,$this->enclosure,$this->escape);$length-=1;}$this->setup();return$ret;}public function splice($offset,$length,array$replacement){if(!isset($this->lines[$offset])){throw new OutOfRangeException();}reset($replacement);$ret=array();fseek($this->pointer,$this->lines[$offset]);while($length&&!feof($this->pointer)){$ret[]=fremovecsv($this->pointer,$this->length,$this->delimiter,$this->enclosure,$this->escape);$length-=1;}while($replacement){$insert=array_shift($replacement);if(!is_array($insert)){throw new InvalidArgumentException();}finsertcsv($this->pointer,$insert,$this->delimiter,$this->enclosure,$this->escape);}$this->setup();return$ret;}public static function encapsulate(array$arr,$enclosure='"',$escape="\\"){$ret=array();foreach($arr as$element){$ret[]=$enclosure.str_replace($enclosure,$escape.$enclosure,$element).$enclosure;}return$ret;}}class CSVIteratorRow implements ArrayAccess,Iterator,Countable{protected$csv;protected$row;protected$_array;protected$saveChanges=true;public function normalize(){if(count($this->_array)<$this->csv->maxCount){$this->_array=array_pad($this->_array,$this->csv->maxCount,"");}return;}public function __construct(CSVIterator $csv,$row,array$_array){$this->csv=$csv;$this->row=$row;$this->_array=$_array;return;}public function __get($offset){return$this->_array[$offset];}public function __set($offset,$value){return$this->offsetSet($offset,$value);}public function __isset($offset){return$this->offsetExists($offset);}public function __unset($offset){return$this->offsetUnset($offset);}public function __toString(){return implode($this->csv->delimiter,CSVIterator::encapsulate($this->_array,$this->csv->enclosure,$this->csv->escape));}public function offsetGet($offset){return$this->_array[$offset];}public function offsetSet($offset,$value){if(!isset($this->_array[$offset])||$this->_array[$offset]!=$value){$this->_array[$offset]=strval($value);$this->update();}return;}public function offsetExists($offset){return isset($this->_array[$offset]);}public function offsetUnset($offset){unset($this->_array[$offset]);$this->normalize();$this->update();return;}public function count(){return count($this->_array);}public function valid(){return key($this->_array)!==null;}public function rewind(){return reset($this->_array);}public function key(){return key($this->_array);}public function current(){return current($this->_array);}public function next(){return next($this->_array);}public function prev(){return prev($this->_array);}public function end(){return end($this->_array);}public function reset(){return$this->rewind();}public function remove($offset){return$this->offsetUnset($offset)||true;}public function append($element){return$this->unshift($element);}public function prepend($element){return$this->push($element);}public function insert($offset,$element){return$this->offsetSet($offset,$element);}public function shift(){$x=array_shift($this->_array);$this->update();return$x;}public function pop(){$x=array_pop($this->_array);$this->update();return$x;}public function push(){$args=func_get_args();array_unshift($args,$this->_array);$x=call_user_func_array("array_push",$args);$this->update();return$x;}public function unshift(){$args=func_get_args();array_unshift($args,$this->_array);$x=call_user_func_array("array_unshift",$args);$this->update();return$x;}public function slice($offset){$args=func_get_args();array_unshift($args,$this->_array);$x=call_user_func_array("array_slice",$args);$this->update();return$x;}public function splice($offset,$length){$args=func_get_args();array_unshift($args,$this->_array);$x=call_user_func_array("array_splice",$args);$this->update();return$x;}public function update(){if($this->saveChanges){$this->normalize();return$this->csv->offsetSet($this->row,$this->_array);}}public function toArray(){return$this->_array;}}class clqhtmltable{public$xhtml=true;private$thead=array();private$tfoot=array();private$tbody_ar=array();private$cur_section;private$colgroups_ar=array();private$cols_ar=array();private$tableStr='';function __construct($id='',$class='',$border=0,$attr_ar=array()){$this->cur_section=&$this->tbody_ar[0];$this->tableStr="\n<table".(!empty($id)?" id=\"$id\"":'').(!empty($class)?" class=\"$class\"":'').$this->addAttribs($attr_ar)." border=\"$border\">\n";}function addTSection($sec,$class='',$attr_ar=array()){switch($sec){case'thead':$ref=&$this->thead;break;case'tfoot':$ref=&$this->tfoot;break;case'tbody':$ref=&$this->tbody_ar[count($this->tbody_ar)];break;default:$ref=&$this->tbody_ar[count($this->tbody_ar)];}$ref['class']=$class;$ref['atts']=$attr_ar;$ref['rows']=array();$this->cur_section=&$ref;}function addColgroup($span='',$class='',$attr_ar=array()){$group=array('span'=>$span,'class'=>$class,'atts'=>$attr_ar,'cols'=>array());$this->colgroups_ar[]=&$group;}function addCol($span='',$class='',$attr_ar=array()){$col=array('span'=>$span,'class'=>$class,'atts'=>$attr_ar);if(!empty($this->colgroups_ar)){$group=&$this->colgroups_ar[count($this->colgroups_ar)-1];$group['cols'][]=&$col;}else{$this->cols_ar[]=&$col;}}public function addCaption($cap,$class='',$attr_ar=array()){$this->tableStr.="<caption".(!empty($class)?" class=\"$class\"":'').$this->addAttribs($attr_ar).'>'.$cap."</caption>\n";}private function addAttribs($attr_ar){$str='';foreach($attr_ar as$key=>$val){$str.=" $key=\"$val\"";}return$str;}function addRow($class='',$attr_ar=array()){$this->cur_section['rows'][]=array('class'=>$class,'atts'=>$attr_ar,'cells'=>array());}function addCell($data='',$class='',$type='data',$attr_ar=array()){$cell=array('data'=>$data,'class'=>$class,'type'=>$type,'atts'=>$attr_ar);if(empty($this->cur_section['rows'])){try{throw new Exception('You need to addRow before you can addCell');}catch(Exception $ex){$msg=$ex->getMessage();echo"<p>Error: $msg</p>";}}$count=count($this->cur_section['rows']);$curRow=&$this->cur_section['rows'][$count-1];$curRow['cells'][]=&$cell;}private function getRowCells($cells){$str='';foreach($cells as$cell){$tag=($cell['type']=='data')?'td':'th';$str.=(!empty($cell['class'])?"    <$tag class=\"{$cell['class']}\"":"    <$tag").$this->addAttribs($cell['atts']).">".$cell['data']."</$tag>\n";}return$str;}function display(){$this->tableStr.=$this->getColgroups();$this->tableStr.=!empty($this->thead)?$this->getSection($this->thead,'thead'):'';$this->tableStr.=!empty($this->tfoot)?$this->getSection($this->tfoot,'tfoot'):'';foreach($this->tbody_ar as$sec){$this->tableStr.=!empty($sec)?$this->getSection($sec,'tbody'):'';}$this->tableStr.="</table>\n";return$this->tableStr;}private function getColgroups(){$str='';if(!empty($this->colgroups_ar)){foreach($this->colgroups_ar as$group){$str.="<colgroup".(!empty($group['span'])?" span=\"{$group['span']}\"":'').(!empty($group['class'])?" class=\"{$group['class']}\"":'').$this->addAttribs($group['atts']).">".$this->getCols($group['cols'])."</colgroup>\n";}}else{$str.=$this->getCols($this->cols_ar);}return$str;}private function getCols($ar){$str='';foreach($ar as$col){$str.="<col".(!empty($col['span'])?" span=\"{$col['span']}\"":'').(!empty($col['class'])?" class=\"{$col['class']}\"":'').$this->addAttribs($col['atts']).($this->xhtml?" />":">");}return$str;}private function getSection($sec,$tag){$class=!empty($sec['class'])?" class=\"{$sec['class']}\"":'';$atts=!empty($sec['atts'])?$this->addAttribs($sec['atts']):'';$str="<$tag".$class.$atts.">\n";foreach($sec['rows']as$row){$str.=(!empty($row['class'])?"  <tr class=\"{$row['class']}\"":"  <tr").$this->addAttribs($row['atts']).">\n".$this->getRowCells($row['cells'])."  </tr>\n";}$str.="</$tag>\n";return$str;}}class Utility{static public function array_kmap(Closure $callback,Array$input){$output=array();foreach($input as$key=>$value){array_push($output,$callback($key,$value));}return$output;}static public function reverse_merge(Array&$overrides,Array$options){$overrides=array_merge($options,$overrides);}static public function capture(Closure $call){ob_start();$call();return ob_get_clean();}}class HtmlGen{static public$self_closing_tags=array("base","basefont","br","col","frame","hr","input","link","meta","param");static private$indent_level=-1;static private$indent_pattern="\t";static private$cycles=array();static public function __callStatic($tag,$args){$params=array(null,array(),null);foreach($args as$a){if(is_string($a))$params[0]=$a;elseif(is_array($a))$params[1]=$a;elseif($a instanceof Closure)$params[2]=$a;}array_unshift($params,$tag);call_user_func_array(array("self","content_for"),$params);}static private function content_for($tag,$text=null,$html_attributes=array(),$callback=null){echo self::indent();if(in_array($tag,self::$self_closing_tags)){echo"<{$tag}",self::attributes($html_attributes)," />\n";}else{echo"<{$tag}",self::attributes($html_attributes),">";if($callback instanceof Closure){try{echo"\n",Utility::capture($callback),self::indent(false);}catch(Exception $e){echo"foobasket!";}}else echo $text;echo"</{$tag}>\n";}self::outdent();}static private function attributes(Array$attributes){if(count($attributes)<1){return null;}return" ".implode(" ",Utility::array_kmap(function($k,$v){return"{$k}=\"".htmlspecialchars($v)."\"";},$attributes));}static public function a($text,$href,$html_attributes=array()){Utility::reverse_merge($html_attributes,array('href'=>$href));self::__callStatic("a",array($text,$html_attributes));}static public function comment($comment){echo"\n",self::indent(),"<!-- {$comment} -->\n";self::outdent();}static public function set_indent_level($level){if(is_numeric($level))self::$indent_level=$level-1;}static public function set_indent_pattern($pattern){self::$indent_pattern=$pattern;}static private function indent($increment=true){if($increment)self::$indent_level++;$tabs="";for($i=0;$i<self::$indent_level;$i++)$tabs.=self::$indent_pattern;return$tabs;}static private function outdent(){self::$indent_level--;}static public function cycle(Array$options,$handle="default"){if(!array_key_exists($handle,self::$cycles)){self::$cycles[$handle]=$options;return current(self::$cycles[$handle]);}else{if($ret=next(self::$cycles[$handle])){return$ret;}else{reset(self::$cycles[$handle]);return current(self::$cycles[$handle]);}}}static public function reset_cycle($handle="default"){if(array_key_exists($handle,self::$cycles)){reset(self::$cycles[$handle]);}}}if(!class_exists("h")){class_alias('HtmlGen','h');};class clqimage{protected$filename=null;protected$img=null;const RESIZE_DONTFORCE=0;const RESIZE_FORCEWIDTH=1;const RESIZE_FORCEHEIGHT=2;public function __construct($filename){$this->open($filename);}public function open($filename){$this->filename=$filename;$datos=getimagesize($this->filename);$this->width=$datos[0];$this->height=$datos[1];$this->mime=$datos[2];$this->img=$this->createclqimage($this->filename);}public function __destruct(){imagedestroy($this->img);}protected function createclqimage(){$img=null;switch($this->mime){case IMAGETYPE_GIF:$img=imagecreatefromgif($this->filename);break;case IMAGETYPE_JPEG:$img=imagecreatefromjpeg($this->filename);break;case IMAGETYPE_PNG:$img=imagecreatefrompng($this->filename);break;default:throw new Exception("Formato de imagen no soportado");}return$img;}function delete(){imagedestroy($this->img);unlink($this->filename);}function save($filename){switch($this->mime){case IMAGETYPE_GIF:imagegif($this->img,$filename);break;case IMAGETYPE_JPEG:imagejpeg($this->img,$filename);break;case IMAGETYPE_PNG:imagepng($this->img,$filename);break;default:throw new Exception("Formato de imagen no soportado");}return true;}function resize($w,$h,$force=0){$_w=$w;$_h=$h;if($this->width<$this->height){$h=($w/$this->width)*$this->height;}if($this->width>=$this->height){$w=($h/$this->height)*$this->width;}switch($force){case clqimage::RESIZE_DONTFORCE:case clqimage::RESIZE_FORCEWIDTH:$w=$_w;$h=($w/$this->width)*$this->height;break;case clqimage::RESIZE_FORCEHEIGHT:$h=$_h;$w=($h/$this->height)*$this->width;break;}$img=$this->createclqimage();if(function_exists('imagecreatetruecolor')){$img2=imagecreatetruecolor($w,$h);imagecopyresampled($img2,$img,0,0,0,0,$w,$h,$this->width,$this->height);}else{$img2=imagecreate($w,$h);imagecopyresized($img2,$img,0,0,0,0,$w,$h,$this->width,$this->height);}$this->img=$img2;return true;}public function getWidth(){return$this->width;}public function getHeight(){return$this->height;}}class clqthumbnail{var$img;function clqthumbnail($imgfile){$this->img["format"]=@ereg_replace(".*\.(.*)$","\\1",$imgfile);$this->img["format"]=strtoupper($this->img["format"]);if($this->img["format"]=="JPG"||$this->img["format"]=="JPEG"){$this->img["format"]="JPEG";$this->img["src"]=ImageCreateFromJPEG($imgfile);}elseif($this->img["format"]=="PNG"){$this->img["format"]="PNG";$this->img["src"]=ImageCreateFromPNG($imgfile);}elseif($this->img["format"]=="GIF"){$this->img["format"]="GIF";$this->img["src"]=ImageCreateFromGIF($imgfile);}elseif($this->img["format"]=="WBMP"){$this->img["format"]="WBMP";$this->img["src"]=ImageCreateFromWBMP($imgfile);}else{echo"Not Supported File";exit();}@$this->img["height"]=imagesx($this->img["src"]);@$this->img["width"]=imagesy($this->img["src"]);$this->img["quality"]=75;}function size_height($size=100){$this->img["width_thumb"]=$size;@$this->img["height_thumb"]=($this->img["width_thumb"]/$this->img["width"])*$this->img["height"];}function size_width($size=100){$this->img["height_thumb"]=$size;@$this->img["width_thumb"]=($this->img["height_thumb"]/$this->img["height"])*$this->img["width"];}function size_auto($size=100){if($this->img["height"]>=$this->img["width"]){$this->img["height_thumb"]=$size;@$this->img["width_thumb"]=($this->img["height_thumb"]/$this->img["height"])*$this->img["width"];}else{$this->img["width_thumb"]=$size;@$this->img["height_thumb"]=($this->img["width_thumb"]/$this->img["width"])*$this->img["height"];}}function jpeg_quality($quality=95){$this->img["quality"]=$quality;}function show(){@Header("Content-Type: image/".$this->img["format"]);$this->img["des"]=ImageCreateTrueColor($this->img["height_thumb"],$this->img["width_thumb"]);@imagecopyresized($this->img["des"],$this->img["src"],0,0,0,0,$this->img["height_thumb"],$this->img["width_thumb"],$this->img["height"],$this->img["width"]);if($this->img["format"]=="JPG"||$this->img["format"]=="JPEG"){imageJPEG($this->img["des"],"",$this->img["quality"]);}elseif($this->img["format"]=="PNG"){imagePNG($this->img["des"]);}elseif($this->img["format"]=="GIF"){imageGIF($this->img["des"]);}elseif($this->img["format"]=="WBMP"){imageWBMP($this->img["des"]);}}function save($save=""){if(empty($save))$save=strtolower("./thumb.".$this->img["format"]);$this->img["des"]=ImageCreateTrueColor($this->img["height_thumb"],$this->img["width_thumb"]);@imagecopyresized($this->img["des"],$this->img["src"],0,0,0,0,$this->img["height_thumb"],$this->img["width_thumb"],$this->img["height"],$this->img["width"]);if($this->img["format"]=="JPG"||$this->img["format"]=="JPEG"){imageJPEG($this->img["des"],"$save",$this->img["quality"]);}elseif($this->img["format"]=="PNG"){imagePNG($this->img["des"],"$save");}elseif($this->img["format"]=="GIF"){imageGIF($this->img["des"],"$save");}elseif($this->img["format"]=="WBMP"){imageWBMP($this->img["des"],"$save");}}
	// Add more functions here
}
